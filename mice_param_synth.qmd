---
title: "Mice parametric synthesis"
author: "Thom Benjamin Volker"
format: html
---

Parametric synthesis with mice yields biased and overcovering results. 

```{r}
#| message: false
library(mice)
library(synthpop)
library(furrr)
library(purrr)
library(dplyr)
library(magrittr)
library(ggplot2)
```


## Parameter specifications

```{r}
#| label: param-spec
N <- 500
P <- 6

S <- matrix(0.5, P, P) # covariance matrix
diag(S) <- 1
```

In due time, we will regress $X_1$ on $X_2$, $X_3$, $X_4$, $X_5$ and $X_6$. Given this covariance matrix, this yields regression coefficients

$$
(S_{-1,-1}' S_{-1,-1})^{-1} S'_{-1,-1} S_{1,-1} = \beta
$$
where $S_{-1, -1}$ is the covariance matrix excluding the first row and first column, $S_{-1,-1}'$ is its transpose, and $S_{-1, 1}$ is the column vector of the covariances of $X_1$ with $X_2$ to $X_6$. This yields $\beta = \begin{bmatrix} 0.167 & 0.167 & 0.167 & 0.167 & 0.167 \end{bmatrix}$, with population level effect size 
$$
R^2 = \boldsymbol{1}'_5 (\beta \beta' \odot S_{-1,-1}) \boldsymbol{1}_5
$$
with $\boldsymbol{1}_5$ a length-five column vector of ones.

## Generate data

```{r}
#| label: gen-data
nsim <- 500
set.seed(123)
plan(multisession)

datlist <- map(1:nsim, 
               ~rnorm(N*P) |> 
                 matrix(N,P) %*% chol(S) |> 
                 data.frame())
```

## Create synthetic data

```{r}
#| label: gen-synth
#| cache: true
#| cache-lazy: false
synth_mice <- future_map(datlist, ~ mice(.x,
                                         m = 5,
                                         maxit = 1,
                                         method = "norm",
                                         where = make.where(.x, "all"),
                                         print = F) |>
                                    complete("all"),
                         .options = furrr_options(seed = TRUE))

synth_synthpop <- future_map(datlist, ~ syn(.x,
                                            m = 5, 
                                            method = "norm",
                                            print.flag = F)$syn,
                             .options = furrr_options(seed = TRUE))
```

## Inferences

```{r}
#| label: inferences
coverage <- function(est, true) {
  est |>
    mutate(True_Est = rep(true, nrow(est)/length(true))) |>
    group_by(Var) |>
    summarize(True_Est = mean(True_Est),
              Imp_Est = mean(Est),
              SE = mean(SE),
              Cov = mean(Low < True_Est & True_Est < Upp))
}

true_inf <- map_dfr(datlist, function(x) {
  fit <- lm(X1 ~ X2 + X3 + X4 + X5 + X6, x) |> 
    summary()
  coefs <- fit$coefficients
  df    <- fit$df[2]
  
  
  data.frame(Var = rownames(coefs),
             Est = coefs[,1],
             SE  = coefs[,2],
             Low = coefs[,1] - qt(0.975, df) * coefs[,2],
             Upp = coefs[,1] + qt(0.975, df) * coefs[,2])
  })

mice_inf <- map_dfr(synth_mice, function(x) {
  fit <- map(x, ~ lm(X1 ~ X2 + X3 + X4 + X5 + X6, .x)) |>
    pool(rule = "reiter2003") %$%
    pooled
  
  data.frame(Var = fit[,1],
             Est = fit[,3],
             SE  = sqrt(fit[,6]),
             Low = fit[,3] - qt(0.975, fit[,8]) * sqrt(fit[,6]),
             Upp = fit[,3] + qt(0.975, fit[,8]) * sqrt(fit[,6]))
})

synthpop_inf <- map_dfr(synth_synthpop, function(x) {
  fit <- map(x, ~ lm(X1 ~ X2 + X3 + X4 + X5 + X6, .x)) |>
    pool(rule = "reiter2003") %$%
    pooled
  
  data.frame(Var = fit[,1],
             Est = fit[,3],
             SE  = sqrt(fit[,6]),
             Low = fit[,3] - qt(0.975, fit[,8]) * sqrt(fit[,6]),
             Upp = fit[,3] + qt(0.975, fit[,8]) * sqrt(fit[,6]))
})
```

## Coverage

### True data

```{r}
#| label: df-print
#| include: false

print.df <- function(df) {
  df |>
    knitr::kable(digits = 3) |>
    kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
}
```


```{r}
#| label: true-inf
coverage(true_inf, c(0,1,1,1,1,1)/6) |> print.df()
```

### Mice synthetic

```{r}
#| label: mice-inf
coverage(mice_inf, c(0,1,1,1,1,1)/6) |> print.df()
```

### Synthpop synthetic

```{r}
#| label: synthpop-inf
coverage(synthpop_inf, c(0,1,1,1,1,1)/6) |> print.df()
```

So, we see that whereas inferences on the true data and the synthetic data generated with `synthpop` are unbiased, inferences from the data generated with `mice` are biased. Apart from that, they are also overcovering (with the same pooling rules as used for `synthpop`).

## Visualize results

```{r}
#| label: plot-results
#| message: false
bind_rows(Observed = true_inf,
          Mice = mice_inf,
          Synthpop = synthpop_inf,
          .id = "Method") |>
  ggplot(aes(x = Est, col = Method)) +
  geom_density() +
  ggdark::dark_theme_minimal() +
  facet_wrap(~Var)
```